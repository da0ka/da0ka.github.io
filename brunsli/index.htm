<!doctype html>
<html lang=en>
<head><meta charset="utf-8"><meta name=viewport content="width=device-width, initial-scale=1, shrink-to-fit=no"><link rel=stylesheet href="w3.css"><style>
html{scroll-behavior:smooth}
body{font-family:MS Gothic,sans-serif}
#dropboard{background-color:#f4fff4;border-radius:15px;padding:12px;border:2px dashed #aaa;font-weight:700}
#dropboard:hover{border-color:#888;background-color:#dfd!important}
.punch-line{border-top:2px dashed #aaa}
.spinner{border:4px solid #f3f3f3;border-top:4px solid #aaa;border-radius:50%;width:32px;height:32px;margin:16px -16px;animation:.64s linear infinite spin}
@keyframes spin{0%{transform:rotate(0)}
100%{transform:rotate(360deg)}}
@media (max-width:600px){.w3-modal-content{max-width:90%}}
</style></head><body>
<div class="w3-top">
	<div class="w3-bar w3-black w3-card">
		<a href="#brunsli" class="w3-bar-item w3-button">
			<img alt="Brunsli logo" src="favicon-96.png" width="22" style="vertical-align: bottom; margin: 0 4px 0 0">
			JPEG Lossless Recompression
		</a>
		<a href="#demo" class="w3-bar-item w3-button">Demo</a>
	</div>
</div>
<div class="w3-content" style="max-width:2880px;margin-top:38px">
	<div class="w3-light-gray" id="brunsli"><div class="w3-container w3-content w3-center" style="max-width:1200px">
		<h4>JPEG Lossless Recompression<br/>.jpg &#8644; .brn</h4>
		<p class="w3-opacity"><i>Future of image compression with utmost respect to our digital heritage.</i></p>
		<p class="w3-justify">
			JPEG files can be transformed into the Brunsli form without
			quality loss, while reducing their size by 22<nbsp/>%. Brunsli preserves all the data in a more efficient
			container, where the integrity of an original photograph is maintained  byte-by-byte -- without damage to our
			digital cultural heritage.
		</p>
		<p class="w3-justify">
			On this page you can be one of the first to try out the new compression technology on your photographs. The
			conversion process runs locally in your browser using <a href="https://webassembly.org/">WebAssembly</a>
			technology, no images are uploaded to servers. This demo only works with <i>.jpg</i> files, there is no
			<i>.png</i> nor <i>.gif</i> support at the moment.
		</p>
	</div></div>

	<div id="demo" class="w3-hide"><div class="w3-container w3-content w3-center" style="max-width:1200px">
		<h4>Demo</h4>
		<div class="w3-input w3-large dropboard" id="dropboard">
			<div style="opacity: 0;font-size: 0; margin: -7.5px">
				<input type="file" id="fileSelector" name="files[]" multiple />
			</div>
			<span class='w3-show'>Drop your <span class="w3-text-blue">.jpg</span></span>
			<span id="more-actions" class="w3-hide w3-animate-opacity">or <span class="w3-text-green">.brn</span></span>
			<span class='w3-show'>file here.</span>
			<div style="visibility: hidden;font-size: 0; margin: -7.5px">
				<input type="file" id="dummy" name="files[]" multiple />
			</div>
		</div>
		<div class="w3-justify" id="output"></div>
		<div class="w3-display-container w3-hide" id="spinner"><div class="w3-display-middle spinner"></div></div>
	</div></div>

	<div id="bottom" class="w3-margin-bottom"></div>
</div><script type="text/javascript">
let brunsliModule,dropboard=document.getElementById("dropboard"),fileSelector=document.getElementById("fileSelector"),output=document.getElementById("output"),spinner=document.getElementById("spinner"),moreActions=document.getElementById("more-actions"),bottom=document.getElementById("bottom"),blobUrls=[],fileList=[];
function onDragOver(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	evt.dataTransfer.dropEffect = 'copy';
}
function onDrop(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	if (fileList.length) return;
	processFiles(evt.dataTransfer.files);
}
function onClick(evt) {
	if (fileList.length) return;
	if (evt.button) return;
	if (!evt.isTrusted) return;  // stop recursion
	evt.stopPropagation();
	evt.preventDefault();
	let click = document.createEvent('MouseEvents');
	click.initEvent('click', true, false);
	fileSelector.dispatchEvent(click);
}
function onFileSelect(evt) {
	processFiles(evt.target.files);
}
function processFiles(files) {
	output.innerHTML = '';
	while (blobUrls.length) URL.revokeObjectURL(blobUrls.pop());
	dropboard.disabled = true;
	for (var i = 0, f; f = files[i]; i++) fileList.unshift(f);
	if (!moreActions.classList.contains('w3-show')) {
		moreActions.classList.add('w3-show');
		window.requestAnimationFrame(onAnimationFrame);
		setTimeout(doProcessFiles, 200);
	} else {
		doProcessFiles();
	}
}
function doProcessFiles() {
	spinner.classList.remove('w3-hide');
	window.requestAnimationFrame(onAnimationFrame);
	processNextFile();
}
function onAnimationFrame(timestamp) {
	window.scrollTo(0, document.body.scrollHeight);
}
function processNextFile() {
	if (fileList.length == 0) {
		dropboard.disabled = false;
		spinner.classList.add('w3-hide');
		return;
	}
	let file = fileList.pop();
	let fileName = file.name;
	let fileType = file.type;
	let reader = new FileReader();
	reader.onload = (e) => {
		setTimeout(processNextFile, 0);
		let bytes = e.target.result;
		let size = bytes.byteLength;
		var bytesView = new Uint8Array(bytes);
		let data = brunsliModule._malloc(size);
		brunsliModule.HEAPU8.set(bytesView, data);
		if (fileType == 'image/jpeg') {
			logImage(bytesView);
			processJpeg(fileName, data, size);
		} else {
			processBrunsli(fileName, data, size);
		}
		brunsliModule._free(data);
		log('punch-line', []);
	};
	reader.readAsArrayBuffer(file);
}
function log(clazz, content) {
	let line = document.createElement('div');
	line.className = clazz;
	for (node of content) line.appendChild(node);
	output.appendChild(line);
	setTimeout(() => bottom.scrollIntoView(true), 1);
}
function text(str) {
	return document.createTextNode(str);
}
function logImage(jpegContent) {
	let blobUrl = URL.createObjectURL(new Blob([jpegContent], {type: 'image/jpeg'}));
	blobUrls.push(blobUrl);
	let img = document.createElement('img');
	img.setAttribute('src', blobUrl);
	img.className = 'w3-hover-opacity';
	img.style.maxWidth = "800px";
	img.style.maxHeight = "128px";
	let modalImg = document.createElement('img');
	modalImg.setAttribute('src', blobUrl);
	modalImg.className = 'w3-modal-content';
	let modalDiv = document.createElement('div');
	modalDiv.className = 'w3-modal w3-animate-opacity';
	modalDiv.appendChild(modalImg);
	modalDiv.addEventListener('click', evt => modalDiv.style.display = 'none', false);
	img.addEventListener('click', evt => modalDiv.style.display = 'block', false);
	log('w3-center w3-margin', [img, modalDiv]);
}
function logDownloadLink(fileName, fileContent) {
	let t0 = text("Click the ");
	let t1 = text("link");
	let t2 = text(" to dowload the result.");
	let l1 = document.createElement('a');
	l1.appendChild(t1);
	let blobUrl = URL.createObjectURL(new Blob([fileContent]));
	blobUrls.push(blobUrl);
	l1.setAttribute('href', blobUrl);
	l1.setAttribute('download', fileName);
	log('w3-text-black', [t0, l1, t2]);
}
function processJpeg(fileName, jpegData, jpegSize) {
	log('w3-text-gray', [text("Processing " + fileName + " as JPEG")]);
	log('w3-text-gray', [text("Input size: " + jpegSize)]);
	let t0 = performance.now();
	let brunsli = brunsliModule._JpegToBrunsli(jpegData, jpegSize);
	let t1 = performance.now();
	if (!brunsli) {
		log('w3-text-red', [text("Brunsli Recompression failed")]);
		return;
	}
	let brunsliData = brunsliModule._GetBrunsliData(brunsli);
	let brunsliSize = brunsliModule._GetBrunsliLength(brunsli);
	let brunsliDataView = new Uint8Array(brunsliModule.HEAPU8.subarray(brunsliData, brunsliData + brunsliSize));
	let output = new Uint8Array(brunsliSize);
	output.set(brunsliDataView);
	brunsliModule._FreeBrunsli(brunsli);
	log('w3-text-gray', [text("Output size: " + brunsliSize)]);
	log('w3-text-gray', [text("Processing time: " + (((t1 - t0)|0) / 1000.0) + "s")]);
	logDownloadLink(fileName + '.brn', output);
}
function processBrunsli(fileName, brunsliData, brunsliSize) {
	log('w3-text-gray', [text("Processing " + fileName + " as Brunsli")]);
	log('w3-text-gray', [text("Input size: " + brunsliSize)]);
	let t0 = performance.now();
	let jpeg = brunsliModule._BrunsliToJpeg(brunsliData, brunsliSize);
	let t1 = performance.now();
	if (!jpeg) {
		log('w3-text-red', [text("Reconstuction failed")]);
		return;
	}
	let jpegData = brunsliModule._GetJpegData(jpeg);
	let jpegSize = brunsliModule._GetJpegLength(jpeg);
	let jpegDataView = new Uint8Array(brunsliModule.HEAPU8.subarray(jpegData, jpegData + jpegSize));
	let output = new Uint8Array(jpegSize);
	output.set(jpegDataView);
	brunsliModule._FreeBrunsli(jpeg);
	log('w3-text-gray', [text("Output size: " + jpegSize)]);
	log('w3-text-gray', [text("Processing time: " + (((t1 - t0)|0) / 1000.0) + "s")]);
	logImage(output);
	logDownloadLink(fileName + '.jpg', output);
}
document.addEventListener('DOMContentLoaded', () => {
let brunsliModuleLoader = BrunsliCodecModule();
brunsliModuleLoader.then(wasmModule => {
	brunsliModule = wasmModule;
	document.getElementById("demo").classList.remove("w3-hide");
});
dropboard.addEventListener('dragover', onDragOver, false);
dropboard.addEventListener('drop', onDrop, false);
dropboard.addEventListener('click', onClick, false);
fileSelector.addEventListener('change', onFileSelect, false)
})
</script><script type="text/javascript" src="brunslicodec-wasm.js"></script></body></html>